/*"cores.h"
#pragma once

typedef float color[3];

color vermelho = { 0.85, 0.12, 0.0 };
color verde = { 0.0, 1.0, 0.0 };
color azul = { 0.0, 0.15,0.35 };
color preto = { 0.0, 0.0, 0.0 };
color branco = { 1.0, 1.0, 1.0 };
color branco_gelo = { 0.88,0.91,0.89 };
color amarelo = { 1.0, 1.0, 0.0 };
color violeta = { 0.54, 0.17, 0.88 };
color cinza = { 0.8, 0.8, 0.8 };
color cinza_escuro = { 0.67,0.67,0.67 };
color laranja = { 1.0, 0.6, 0.2 };
*/

/*"primitivas.h"
#pragma once
#include<vector>
#include<cmath>

struct vec3 {
	float x, y, z;
	vec3() :x(0.0), y(0.0), z(0.0) {}
	vec3(float x_, float y_, float z_) :x(x_), y(y_), z(z_) {}
};

void rect(vec3 p1, vec3 p2, vec3 p3, vec3 p4, color cor)
{
	glColor3fv(cor);
	glBegin(GL_QUADS);
	glVertex3fv(&p1.x);
	glVertex3fv(&p2.x);
	glVertex3fv(&p3.x);
	glVertex3fv(&p4.x);
	glEnd();
}
void desenhaCubo(float s)
{
	float d = s / 2.0;

	vec3 v1(-d, d, d);
	vec3 v2(-d, -d, d);
	vec3 v3(d, -d, d);
	vec3 v4(d, d, d);

	vec3 v5(d, d, -d);
	vec3 v6(d, -d, -d);
	vec3 v7(-d, -d, -d);
	vec3 v8(-d, d, -d);

	// frente
	rect(v1, v2, v3, v4, vermelho);

	// direita
	rect(v4, v3, v6, v5, azul);

	// back
	rect(v5, v8, v7, v6, amarelo);

	//esquerda
	rect(v1, v8, v7, v2, verde);

	//topo
	rect(v1, v4, v5, v8, laranja);

	//bottom
	rect(v2, v7, v6, v3, violeta);

}


void desenhaEsfera(GLfloat raio, GLuint nStacks, GLuint nSectors)
{
	std::vector< std::vector<GLuint> > indices;
	
	std::vector<vec3> pontos;
	const GLfloat PI = 3.14159265359;

	GLfloat deltaPhi = PI / nStacks;
	GLfloat deltaTheta = 2 * PI / nSectors;

	for (GLuint i = 0; i <= nStacks; i++)
	{
		GLfloat phi = -PI / 2.0 + i * deltaPhi;
		GLfloat temp = raio * cos(phi);
		GLfloat y = raio * sin(phi);
		
		std::vector<GLuint> pt;

		for (GLuint j = 0; j < nSectors; j++)
		{
			GLfloat theta = j * deltaTheta;
			GLfloat x = temp * sin(theta);
			GLfloat z = temp * cos(theta);

			pontos.push_back(vec3(x, y, z));
			GLuint index = pontos.size() - 1;
			pt.push_back(index);
		}// next j

		indices.push_back(pt);
	}// next i


	// --- plota pontos 
	/*glColor3fv(vermelho);
	glPointSize(2.5);
	glBegin(GL_POINTS);
	for (GLuint i = 0; i < pontos.size(); i++)
	{
		glVertex3fv(&pontos[i].x);
	}
	glEnd();*/

	//glColor3fv(laranja);
	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	for (GLuint i = 0; i < nStacks; i++)
	{

		if (i % 3 == 0)
			glColor3fv(branco_gelo);
		else if (i % 3 == 1)
			glColor3fv(cinza);
		else
			glColor3fv(cinza_escuro);

		glBegin(GL_TRIANGLE_STRIP);

		for (GLuint j = 0; j < nSectors; j++)
		{
			GLuint index = indices[i][j];
			glVertex3fv(&pontos[index].x);
			index = indices[i + 1][j];
			glVertex3fv(&pontos[index].x);

			if (j == nSectors - 1)
			{
				index = indices[i][0];
				glVertex3fv(&pontos[index].x);
				index = indices[i+1][0];
				glVertex3fv(&pontos[index].x);
			}
		}
		glEnd();
	}
}
*/

#include<Windows.h>
#include <GLFW/glfw3.h>
#include<gl/GLU.h>
#include<iostream>
#include "cores.h"
#include "primitivas.h"

static float angulo = 0.0;
void redimensiona(int w, int h)
{
	glViewport(0, 0, w, h);

	float aspect = (float)w / (float)h;

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0, aspect, 0.1, 500.0);

	glMatrixMode(GL_MODELVIEW);
}


void desenha()
{
	glLoadIdentity();

	glTranslatef(0.0, 0.0, -50.0);
	glRotatef(angulo, 1.0, 1.0, 0.0);
	desenhaEsfera(10.0, 20.0, 20.0);
	

	angulo += 0.1;
}


int main(void)
{

	const int LARGURA = 800;
	const int ALTURA = 600;

	/* Initialize the library */
	glfwInit();

	/* Create a windowed mode window and its OpenGL context */
	GLFWwindow* window = glfwCreateWindow(LARGURA, ALTURA, "Desenha Esfera", NULL, NULL);

	/* Make the window's context current */
	glfwMakeContextCurrent(window);

	// -- inicio
	glClearColor(0.0, 0.15, 0.25, 1.0); // cor de fundo
	glEnable(GL_DEPTH_TEST);

	/* Loop until the user closes the window */
	while (!glfwWindowShouldClose(window))
	{
		/* Poll for and process events */
		glfwPollEvents();
		if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		{
			glfwSetWindowShouldClose(window, GLFW_TRUE);
		}

		/* Render here */
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		int largura, altura;
		glfwGetFramebufferSize(window, &largura, &altura);

		redimensiona(largura, altura);

		desenha();

		/* Swap front and back buffers */
		glfwSwapBuffers(window);
	}

	glfwTerminate();
	return 0;
}
