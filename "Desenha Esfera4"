#include<Windows.h>
#include <GLFW/glfw3.h>
#include<gl/GLU.h>
#include<iostream>
#include "cores.h"
#include "primitivas.h"

static float angulo = 0.0;

// Display List
unsigned int esferaID[3];


void redimensiona(int w, int h)
{
	glViewport(0, 0, w, h);

	float aspect = (float)w / (float)h;

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0, aspect, 0.1, 500.0);

	glMatrixMode(GL_MODELVIEW);
}


void desenha()
{
	glLoadIdentity();

	glPushMatrix();
	glTranslatef(-30.0, 0.0, -80.0);
	glRotatef(angulo, 1.0, 1.0, 0.0);
	glCallList(esferaID[0]);
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.0, 0.0, -80.0);
	glRotatef(angulo, 1.0, 1.0, 0.0);
	glCallList(esferaID[1]);
	glPopMatrix();


	glPushMatrix();
	glTranslatef(30.0, 0.0, -80.0);
	glRotatef(angulo, 1.0, 1.0, 0.0);
	glCallList(esferaID[2]);
	glPopMatrix();

	angulo += 1.0;
	if (angulo >= 360.0)
		angulo = 0.0;
}

void init()
{
	//glClearColor(0.0, 0.15, 0.25, 1.0); // cor de fundo
	glClearColor(0.0, 0.0, 0.0, 1.0);

	glEnable(GL_DEPTH_TEST);

	esferaID[0] = glGenLists(3);
	esferaID[1] = esferaID[0] + 1;
	esferaID[2] = esferaID[0] + 2;

	desenhaEsfera(esferaID[0], verde, 10.0, 20.0, 20.0);
	desenhaEsfera(esferaID[1], laranja, 5.0, 20.0, 20.0);
	desenhaEsfera(esferaID[2], azul, 8.0, 20.0, 20.0);

}


int main(void)
{

	const int LARGURA = 800;
	const int ALTURA = 600;

	/* Initialize the library */
	glfwInit();

	/* Create a windowed mode window and its OpenGL context */
	GLFWwindow* window = glfwCreateWindow(LARGURA, ALTURA, "Desenha Esfera", NULL, NULL);

	/* Make the window's context current */
	glfwMakeContextCurrent(window);

	// -- inicio
	init();
	
	float valor = 0.0;
	float lastTime = 0.0;
	float FPS = 60.0;

	/* Loop until the user closes the window */
	while (!glfwWindowShouldClose(window))
	{	
		float now;
		float dt;
		do {
			 now = (float)glfwGetTime();
			 dt = now - lastTime;

		} while (dt < 1.0 / FPS);
		lastTime = now;

		
		
		/*float PASSO = 1.0;
		float R = 0.1;
		float velocidade = 1.0 / R * PASSO*dt;
*/

		/* Poll for and process events */
		glfwPollEvents();
		if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		{
			glfwSetWindowShouldClose(window, GLFW_TRUE);
		}
		else if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
		{
			valor = valor + 1.0;
			std::cout << valor << std::endl;
		}
		/* Render here */
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		int largura, altura;
		glfwGetFramebufferSize(window, &largura, &altura);

		redimensiona(largura, altura);

		desenha();

		/* Swap front and back buffers */
		glfwSwapBuffers(window);
	}
	
	glDeleteLists(esferaID[0], 3);
	glfwTerminate();
	return 0;
}
