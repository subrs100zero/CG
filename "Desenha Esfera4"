#include <GL/freeglut.h>
#include <cmath>
static float angulo = 0.0;
static float velocidade_rotacao = 180.0;  // graus por segundo
static float lastFrameTime = 0.0;
void redimensiona(int w, int h)
{
    glViewport(0, 0, w, h);
    float aspect = (float)w / (float)h;
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, aspect, 0.1, 500.0);
    glMatrixMode(GL_MODELVIEW);
}
void desenhaEsfera(GLfloat raio, GLuint nStacks, GLuint nSectors)
{
    const GLfloat PI = 3.14159265359;
    GLfloat deltaPhi = PI / nStacks;
    GLfloat deltaTheta = 2 * PI / nSectors;

    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
    glEnable(GL_CULL_FACE);
    glFrontFace(GL_CCW);
    glCullFace(GL_BACK);

    for (GLuint i = 0; i < nStacks; i++)
    {
        glBegin(GL_TRIANGLE_STRIP);

        for (GLuint j = 0; j < nSectors; j++)
        {
            GLfloat phi = -PI / 2.0 + i * deltaPhi;
            GLfloat temp = raio * cos(phi);
            GLfloat y = raio * sin(phi);

            GLfloat theta = j * deltaTheta;
            GLfloat x = temp * sin(theta);
            GLfloat z = temp * cos(theta);

            glVertex3f(x, y, z);

            phi = -PI / 2.0 + (i + 1) * deltaPhi;
            temp = raio * cos(phi);
            y = raio * sin(phi);

            theta = (j + 1) * deltaTheta;
            x = temp * sin(theta);
            z = temp * cos(theta);

            glVertex3f(x, y, z);
        }
        glEnd();
    }

    glDisable(GL_CULL_FACE);
}

void desenha()
{
    float currentTime = glutGet(GLUT_ELAPSED_TIME) / 1000.0;
    float delta = currentTime - lastFrameTime;
    lastFrameTime = currentTime;

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    glTranslatef(0.0, 0.0, -5.0);
    glRotatef(angulo, 0.0, 1.0, 0.0);

    desenhaEsfera(1.0, 20, 20);

    angulo += velocidade_rotacao * delta;

    if (angulo >= 360.0)
        angulo -= 360.0;

    glutSwapBuffers();
}

void init()
{
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glEnable(GL_DEPTH_TEST);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    glutCreateWindow("Controle de Quadros");

    init();

    glutReshapeFunc(redimensiona);
    glutDisplayFunc(desenha);
    glutIdleFunc(desenha);

    glutMainLoop();
    return 0;
}
