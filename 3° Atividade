/*#include <stdio.h>
#include <GL/glut.h>

void inicializacao(void);
void desenha(void);

float posicoes[] = {
    -0.5,  0.5, // Faixa superior
     0.5,  0.5,
     0.5,  0.3,
    -0.5,  0.3,

    -0.5,  0.3, // Faixa do meio
     0.5,  0.3,
     0.5,  0.1,
    -0.5,  0.1,

    -0.5,  0.1, // Faixa inferior
     0.5,  0.1,
     0.5, -0.1,
    -0.5, -0.1
};

float cores[] = {

    1.0, 1.0, 1.0, // Branco para a faixa do meio
    1.0, 1.0, 1.0,
    1.0, 1.0, 1.0,
    1.0, 1.0, 1.0,

    0.0, 0.0, 1.0, // Azul para a faixa superior
    0.0, 0.0, 1.0,
    0.0, 0.0, 1.0,
    0.0, 0.0, 1.0,

    1.0, 0.0, 0.0, // Vermelho para a faixa inferior
    1.0, 0.0, 0.0,
    1.0, 0.0, 0.0,
    1.0, 0.0, 0.0
};

int main(int argc, char** argv){
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DEPTH | GLUT_SINGLE | GLUT_RGBA);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(640, 480);
    glutCreateWindow("Bandeira da Rússia");

    inicializacao();

    glutDisplayFunc(desenha);

    glutMainLoop();
}

void inicializacao(){
    glClearColor(0.0, 0.0, 0.0, 0.0); // Fundo preto
}

void desenha(void){
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_COLOR_ARRAY);

    glVertexPointer(2, GL_FLOAT, 2 * sizeof(float), posicoes);
    glColorPointer(3, GL_FLOAT, 3 * sizeof(float), cores);

    glDrawArrays(GL_QUADS, 0, 12); // Desenha as faixas

    glDisableClientState(GL_VERTEX_ARRAY);
    glFlush();
}
*/

/*#include <stdio.h>
#include <GL/glut.h>

void inicializacao(void);
void desenha(void);

float posicoes[] = {
    -0.5, -0.5,
     0.5, -0.5,
     0.0, 0.5
};

float cores[] = {
    1.0, 0.0, 0.0,
    0.0, 1.0, 0.0,
    0.0, 0.0, 1.0
};

int main(int argc, char** argv){
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DEPTH | GLUT_SINGLE | GLUT_RGBA);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(640, 480);
    glutCreateWindow("Meu Primeiro Triângulo");

    inicializacao();

    glutDisplayFunc(desenha);

    glutMainLoop();
}

void inicializacao(){
    glClearColor(0, 0, 0, 0);
}

void desenha(void){
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glEnableClientState(GL_VERTEX_ARRAY);
    glEnableClientState(GL_COLOR_ARRAY);

    glVertexPointer(2, GL_FLOAT, 2 * sizeof(float), posicoes);
    glColorPointer(3, GL_FLOAT, 3 * sizeof(float), cores);

    glDrawArrays(GL_TRIANGLES, 0, 3);

    glDisableClientState(GL_VERTEX_ARRAY);
    glFlush();
}
*/

/*#include <GL/glut.h>

void inicializacao(void) {
   glClearColor(0.0, 0.0, 0.0, 0.0);
   glMatrixMode(GL_PROJECTION);
   gluOrtho2D(-2.0, 2.0, -2.0, 2.0); // Ajustou a projeção ortográfica
}

void desenhaBonecoPalito(void) {
   // Cabeça (quadrado)
   glColor3f(1.0, 0.0, 0.0);
   glBegin(GL_QUADS);
       glVertex2f(-0.2, 0.2);
       glVertex2f(-0.2, 0.4);
       glVertex2f(0.2, 0.4);
       glVertex2f(0.2, 0.2);
   glEnd();

   // Corpo (linha)
   glColor3f(0.0, 1.0, 0.0);
   glBegin(GL_LINES);
       glVertex2f(0.0, 0.2);
       glVertex2f(0.0, -0.4);
   glEnd();

   // Perna esquerda (linha)
   glColor3f(0.0, 0.0, 1.0);
   glBegin(GL_LINES);
       glVertex2f(0.0, -0.4);
       glVertex2f(-0.2, -0.6);
   glEnd();

   // Perna direita (linha)
   glBegin(GL_LINES);
       glVertex2f(0.0, -0.4);
       glVertex2f(0.2, -0.6);
   glEnd();

   // Braço esquerdo (linha)
   glColor3f(1.0, 1.0, 0.0);
   glBegin(GL_LINES);
       glVertex2f(0.0, 0.0);
       glVertex2f(-0.2, 0.1);
   glEnd();

   // Braço direito (linha)
   glBegin(GL_LINES);
       glVertex2f(0.0, 0.0);
       glVertex2f(0.2, 0.1);
   glEnd();
}

void exibicao(void) {
   glClear(GL_COLOR_BUFFER_BIT);
   glLoadIdentity();
   desenhaBonecoPalito();
   glFlush();
}

int main(int argc, char** argv) {
   glutInit(&argc, argv);
   glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
   glutInitWindowSize(500, 500);
   glutInitWindowPosition(100, 100);
   glutCreateWindow("Boneco Palito");
   inicializacao();
   glutDisplayFunc(exibicao);
   glutMainLoop();

   return 0;
}

*/
