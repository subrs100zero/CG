#include <Windows.h>
#include <GL/glut.h>
#include <gl/GLU.h>
#include <iostream>
#include <vector>
#include <cmath>

struct vec3 {
    float x, y, z;
    vec3() : x(0.0), y(0.0), z(0.0) {}
    vec3(float x_, float y_, float z_) : x(x_), y(y_), z(z_) {}
};

typedef float Cor[3];

Cor vermelho = { 0.85, 0.12, 0.0 };
Cor verde = { 0.0, 1.0, 0.0 };
Cor azul = { 0.0, 0.15, 0.35 };
Cor amarelo = { 1.0, 1.0, 0.0 };
Cor laranja = { 1.0, 0.6, 0.2 };

void retangulo(vec3 p1, vec3 p2, vec3 p3, vec3 p4, Cor cor)
{
    glColor3fv(cor);
    glBegin(GL_QUADS);
    glVertex3fv(&p1.x);
    glVertex3fv(&p2.x);
    glVertex3fv(&p3.x);
    glVertex3fv(&p4.x);
    glEnd();
}

void desenhaCubo(float s)
{
    float d = s / 2.0;

    vec3 v1(-d, d, d);
    vec3 v2(-d, -d, d);
    vec3 v3(d, -d, d);
    vec3 v4(d, d, d);

    vec3 v5(d, d, -d);
    vec3 v6(d, -d, -d);
    vec3 v7(-d, -d, -d);
    vec3 v8(-d, d, -d);

    // frente
    retangulo(v1, v2, v3, v4, vermelho);

    // direita
    retangulo(v4, v3, v6, v5, azul);

    // tr√°s
    retangulo(v5, v8, v7, v6, amarelo);

    // esquerda
    retangulo(v1, v8, v7, v2, verde);

    // topo
    retangulo(v1, v4, v5, v8, laranja);

    // base
    retangulo(v2, v7, v6, v3, azul);
}

void desenhaEsfera(GLfloat raio, GLuint nStacks, GLuint nSectors, Cor cor)
{
    std::vector<std::vector<GLuint>> indices;
    std::vector<vec3> pontos;
    const GLfloat PI = 3.14159265359;

    GLfloat deltaPhi = PI / nStacks;
    GLfloat deltaTheta = 2 * PI / nSectors;

    for (GLuint i = 0; i <= nStacks; i++)
    {
        GLfloat phi = -PI / 2.0 + i * deltaPhi;
        GLfloat temp = raio * cos(phi);
        GLfloat y = raio * sin(phi);

        std::vector<GLuint> pt;

        for (GLuint j = 0; j < nSectors; j++)
        {
            GLfloat theta = j * deltaTheta;
            GLfloat x = temp * sin(theta);
            GLfloat z = temp * cos(theta);

            pontos.push_back(vec3(x, y, z));
            GLuint index = pontos.size() - 1;
            pt.push_back(index);
        }

        indices.push_back(pt);
    }

    glColor3fv(cor);
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

    for (GLuint i = 0; i < nStacks; i++)
	{

		glBegin(GL_TRIANGLE_STRIP);

		for (GLuint j = 0; j < nSectors; j++)
		{
			GLuint index = indices[i][j];
			glVertex3fv(&pontos[index].x);
			index = indices[i + 1][j];
			glVertex3fv(&pontos[index].x);

			if (j == nSectors - 1)
			{
				index = indices[i][0];
				glVertex3fv(&pontos[index].x);
				index = indices[i + 1][0];
				glVertex3fv(&pontos[index].x);
			}
		}
		glEnd();
	}
}

static float angulo = 0.0;

void redimensiona(int w, int h)
{
    glViewport(0, 0, w, h);

    float aspect = (float)w / (float)h;

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, aspect, 0.1, 500.0);

    glMatrixMode(GL_MODELVIEW);
}

void desenha()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glLoadIdentity();

    glPushMatrix();
    glTranslatef(-30.0, 0.0, -50.0);
    glRotatef(angulo, 1.0, 1.0, 0.0);
    desenhaEsfera(10.0, 20.0, 20.0, verde);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(0.0, 0.0, -50.0);
    glRotatef(angulo, 1.0, 1.0, 0.0);
    desenhaEsfera(5.0, 20.0, 20.0, laranja);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(30.0, 0.0, -50.0);
    glRotatef(angulo, 1.0, 1.0, 0.0);
    desenhaEsfera(8.0, 20.0, 20.0, azul);
    glPopMatrix();

    angulo += 0.05;
    if (angulo >= 360.0)
        angulo = 0.0;

    glutSwapBuffers();
}

void init()
{
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glEnable(GL_DEPTH_TEST);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    glutCreateWindow("Desenha Esfera");

    init();

    glutReshapeFunc(redimensiona);
    glutDisplayFunc(desenha);
    glutIdleFunc(desenha);

    glutMainLoop();
    return 0;
}
