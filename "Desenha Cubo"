#include <Windows.h>
#include <GL/glut.h>
#include <gl/GLU.h>
#include <iostream>

typedef float color[3];

color vermelho = { 0.85, 0.12, 0.0 };
color verde = { 0.0, 1.0, 0.0 };
color azul = { 0.0, 0.15,0.35 };
color preto = { 0.0, 0.0, 0.0 };
color branco = { 1.0, 1.0, 1.0 };
color branco_gelo = { 0.88,0.91,0.89 };
color amarelo = { 1.0, 1.0, 0.0 };
color violeta = { 0.54, 0.17, 0.88 };
color cinza = { 0.8, 0.8, 0.8 };
color cinza_escuro = { 0.67,0.67,0.67 };
color laranja = { 1.0, 0.6, 0.2 };

void redimensiona(int w, int h)
{
    glViewport(0, 0, w, h);

    float aspecto = (float)w / (float)h;

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, aspecto, 0.1, 500.0);

    glMatrixMode(GL_MODELVIEW);
}

void desenhaRetangulo(float p1[3], float p2[3], float p3[3], float p4[3], color cor)
{
    glColor3fv(cor);
    glBegin(GL_QUADS);
    glVertex3fv(p1);
    glVertex3fv(p2);
    glVertex3fv(p3);
    glVertex3fv(p4);
    glEnd();
}

void desenhaCubo(float s)
{
    float d = s / 2.0;

    float v1[3] = { -d,  d, d };
    float v2[3] = { -d, -d, d };
    float v3[3] = { d, -d, d };
    float v4[3] = { d,  d, d };

    float v5[3] = { d,  d, -d };
    float v6[3] = { d, -d, -d };
    float v7[3] = { -d, -d, -d };
    float v8[3] = { -d,  d, -d };

    // frente
    desenhaRetangulo(v1, v2, v3, v4, vermelho);

    // direita
    desenhaRetangulo(v4, v3, v6, v5, azul);

    // tr√°s
    desenhaRetangulo(v5, v8, v7, v6, amarelo);

    // esquerda
    desenhaRetangulo(v1, v8, v7, v2, verde);

    // topo
    desenhaRetangulo(v1, v4, v5, v8, laranja);

    // base
    desenhaRetangulo(v2, v7, v6, v3, violeta);
}

void desenha()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glLoadIdentity();

    glPushMatrix();
    glTranslatef(-20.0, 0.0, -50.0);
    desenhaCubo(8.0);
    glPopMatrix();

    glPushMatrix();
    glTranslatef(20.0, 0.0, -50.0);
    desenhaCubo(8.0);
    glPopMatrix();

    glutSwapBuffers();
}

void inicializa()
{
    glClearColor(0.0, 0.15, 0.25, 1.0); // cor de fundo
    glEnable(GL_DEPTH_TEST);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    glutCreateWindow("Desenha Cubo");

    inicializa();

    glutReshapeFunc(redimensiona);
    glutDisplayFunc(desenha);

    glutMainLoop();

    return 0;
}
