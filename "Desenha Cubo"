#include <Windows.h>
#include <GLFW/glfw3.h>
#include <gl/GLU.h>
#include <iostream>
#include "cores.h"

void redimensiona(int w, int h)
{
    glViewport(0, 0, w, h);

    float aspecto = (float)w / (float)h;

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, aspecto, 0.1, 500.0);

    glMatrixMode(GL_MODELVIEW);
}

void retangulo(float p1[3], float p2[3], float p3[3], float p4[3], color cor)
{
    glColor3fv(cor);
    glBegin(GL_QUADS);
    glVertex3fv(p1);
    glVertex3fv(p2);
    glVertex3fv(p3);
    glVertex3fv(p4);
    glEnd();
}

void desenhaCubo(float s)
{
    float d = s / 2.0;

    float v1[3] = { -d,  d, d };
    float v2[3] = { -d, -d, d };
    float v3[3] = { d, -d, d };
    float v4[3] = { d,  d, d };

    float v5[3] = { d,  d, -d };
    float v6[3] = { d, -d, -d };
    float v7[3] = { -d, -d, -d };
    float v8[3] = { -d,  d, -d };

    // frente
    retangulo(v1, v2, v3, v4, vermelho);

    // direita
    retangulo(v4, v3, v6, v5, azul);

    // trás
    retangulo(v5, v8, v7, v6, amarelo);

    // esquerda
    retangulo(v1, v8, v7, v2, verde);

    // topo
    retangulo(v1, v4, v5, v8, laranja);

    // base
    retangulo(v2, v7, v6, v3, violeta);
}

void desenha()
{
    glLoadIdentity();

    glPushMatrix();
    glTranslatef(-20.0, 0.0, -50.0);
    desenhaCubo(8.0);
    glPopMatrix();

    glTranslatef(20.0, 0.0, -50.0);
    desenhaCubo(8.0);
}

int main(void)
{
    const int LARGURA = 800;
    const int ALTURA = 600;

    /* Inicializa a biblioteca */
    glfwInit();

    /* Cria uma janela em modo de janela e seu contexto OpenGL */
    GLFWwindow* janela = glfwCreateWindow(LARGURA, ALTURA, "Desenha Cubo", NULL, NULL);

    /* Torna o contexto da janela atual */
    glfwMakeContextCurrent(janela);

    // -- início
    glClearColor(0.0, 0.15, 0.25, 1.0); // cor de fundo
    glEnable(GL_DEPTH_TEST);

    /* Loop até que o usuário feche a janela */
    while (!glfwWindowShouldClose(janela))
    {
        /* Aguarda e processa eventos */
        glfwPollEvents();
        if (glfwGetKey(janela, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        {
            glfwSetWindowShouldClose(janela, GLFW_TRUE);
        }

        /* Renderiza aqui */
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        int largura, altura;
        glfwGetFramebufferSize(janela, &largura, &altura);

        redimensiona(largura, altura);

        desenha();

        /* Troca os buffers frontal e traseiro */
        glfwSwapBuffers(janela);
    }

    glfwTerminate();
    return 0;
}
